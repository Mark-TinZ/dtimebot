from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from sqlalchemy import select
from dtimebot.database import get_session

from dtimebot.logs import main_logger
from dtimebot.models.users import User
from dtimebot.services import user_service, directory_service, task_service, invitation_service

logger = main_logger.getChild('bot.handlers')

router = Router()

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM ---
class DirectoryStates(StatesGroup):
	waiting_for_name = State()
	waiting_for_description = State()
	waiting_for_edit_field = State()
	waiting_for_edit_value = State()
	waiting_for_tag = State()
	waiting_for_tag_action = State()  # add/remove

class TaskStates(StatesGroup):
	waiting_for_title = State()
	waiting_for_description = State()
	waiting_for_edit_field = State()
	waiting_for_edit_value = State()
	waiting_for_tag = State()
	waiting_for_tag_action = State()  # add/remove

class InvitationStates(StatesGroup):
	waiting_for_directory = State()
	waiting_for_max_uses = State()
	waiting_for_expiry_days = State()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏ ---

@router.message(Command("create_dir"))
async def cmd_create_dir_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è."""
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
	await state.set_state(DirectoryStates.waiting_for_name)

@router.message(DirectoryStates.waiting_for_name, F.text)
async def cmd_create_dir_name_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è."""
	await state.update_data(name=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
	await state.set_state(DirectoryStates.waiting_for_description)

@router.message(DirectoryStates.waiting_for_description, Command("skip"))
async def cmd_create_dir_skip_description(message: Message, state: FSMContext):
	"""–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	user_data = await state.get_data()
	name = user_data['name']
	description = ""
	telegram_id = message.from_user.id

	directory = await directory_service.create_directory(telegram_id, name, description)
	
	if directory:
		await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '<b>{name}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {directory.id}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(DirectoryStates.waiting_for_description, F.text)
async def cmd_create_dir_description_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	user_data = await state.get_data()
	name = user_data['name']
	description = message.text
	telegram_id = message.from_user.id

	directory = await directory_service.create_directory(telegram_id, name, description)
	
	if directory:
		await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '<b>{name}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {directory.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(Command("directories"))
@router.message(Command("list_dirs"))
async def cmd_list_dirs(message: Message):
	"""–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
	telegram_id = message.from_user.id
	
	directories = await directory_service.get_user_directories(telegram_id)
	
	if not directories:
		await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /create_dir")
		return

	response_text = "üìÅ –í–∞—à–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n\n"
	for i, dir_obj in enumerate(directories, 1):
		# –ü–æ–ª—É—á–∏–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		tags = await directory_service.get_directory_tags(telegram_id, dir_obj.id)
		tags_str = ', '.join(tags) if tags else '-'
		response_text += (
			f"<b>{i}. {dir_obj.name}</b>\n"
			f"   ID: {dir_obj.id}\n"
			f"   –°–æ–∑–¥–∞–Ω–∞: {dir_obj.created_at.strftime('%d.%m.%Y %H:%M') if dir_obj.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
			f"   –û–ø–∏—Å–∞–Ω–∏–µ: {dir_obj.description or '-'}\n"
			f"   –¢–µ–≥–∏: {tags_str}\n\n"
		)
	
	await message.answer(response_text, parse_mode='HTML')

@router.message(Command("edit_dir"))
async def cmd_edit_dir_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: –≤—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	telegram_id = message.from_user.id
	
	directories = await directory_service.get_user_directories(telegram_id)
	
	if not directories:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		return

	keyboard_buttons = []
	for dir_obj in directories:
		keyboard_buttons.append([f"{dir_obj.id} - {dir_obj.name}"])
	
	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
	builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
	builder.adjust(1)

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
		reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
	)
	await state.set_state(DirectoryStates.waiting_for_name)

@router.message(DirectoryStates.waiting_for_name, F.text)
async def cmd_edit_dir_selected(message: Message, state: FSMContext):
	"""–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		dir_id_str = text.split(' - ')[0]
		directory_id = int(dir_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
		return

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	await state.update_data(directory_id=directory_id)
	
	builder = InlineKeyboardBuilder()
	builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_dir_name_{directory_id}")
	builder.button(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_dir_desc_{directory_id}")
	builder.button(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data=f"edit_dir_tags_{directory_id}")
	builder.adjust(1)
	
	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
		reply_markup=builder.as_markup(),
		reply_to_message_id=message.message_id
	)

@router.callback_query(F.data.startswith("edit_dir_name_"))
async def edit_directory_name_callback(callback: CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	directory_id = int(callback.data.split('_')[-1])
	await state.update_data(directory_id=directory_id, edit_field='name')
	await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
	await state.set_state(DirectoryStates.waiting_for_edit_value)
	await callback.answer()

@router.callback_query(F.data.startswith("edit_dir_desc_"))
async def edit_directory_description_callback(callback: CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	directory_id = int(callback.data.split('_')[-1])
	await state.update_data(directory_id=directory_id, edit_field='description')
	await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
	await state.set_state(DirectoryStates.waiting_for_edit_value)
	await callback.answer()

@router.callback_query(F.data.startswith("edit_dir_tags_"))
async def edit_directory_tags_callback(callback: CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	directory_id = int(callback.data.split('_')[-1])
	await state.update_data(directory_id=directory_id)
	
	builder = InlineKeyboardBuilder()
	builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data=f"add_dir_tag_{directory_id}")
	builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥", callback_data=f"remove_dir_tag_{directory_id}")
	builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–≥–∏", callback_data=f"show_dir_tags_{directory_id}")
	builder.adjust(1)
	
	await callback.message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–≥–∞–º–∏:",
		reply_markup=builder.as_markup()
	)
	await callback.answer()

@router.message(DirectoryStates.waiting_for_edit_value, F.text)
async def cmd_edit_dir_value_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	user_data = await state.get_data()
	directory_id = user_data['directory_id']
	edit_field = user_data['edit_field']
	new_value = message.text
	telegram_id = message.from_user.id

	success = False
	if edit_field == 'name':
		success = await directory_service.update_directory(telegram_id, directory_id, name=new_value)
	elif edit_field == 'description':
		success = await directory_service.update_directory(telegram_id, directory_id, description=new_value)

	if success:
		await message.answer(f"‚úÖ {edit_field.capitalize()} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
	
	await state.clear()

@router.message(Command("delete_dir"))
async def cmd_delete_dir_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: –∑–∞–ø—Ä–æ—Å ID."""
	telegram_id = message.from_user.id
	
	directories = await directory_service.get_user_directories(telegram_id)
	
	if not directories:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		return

	keyboard_buttons = []
	for dir_obj in directories:
		keyboard_buttons.append([f"{dir_obj.id} - {dir_obj.name}"])
	
	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
	builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
	builder.adjust(1)

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ):",
		reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
	)
	await state.set_state(DirectoryStates.waiting_for_name)

@router.message(DirectoryStates.waiting_for_name, F.text)
async def cmd_delete_dir_id_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		dir_id_str = text.split(' - ')[0]
		directory_id = int(dir_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
		return

	telegram_id = message.from_user.id
	success = await directory_service.delete_directory(telegram_id, directory_id)
	
	if success:
		await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å ID {directory_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.", reply_markup=None)
	
	await state.clear()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ ---

@router.message(Command("create_task"))
async def cmd_create_task_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è."""
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
	await state.set_state(TaskStates.waiting_for_title)

@router.message(TaskStates.waiting_for_title, F.text)
async def cmd_create_task_title_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è."""
	await state.update_data(title=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
	await state.set_state(TaskStates.waiting_for_description)

@router.message(TaskStates.waiting_for_description, Command("skip"))
async def cmd_create_task_skip_description(message: Message, state: FSMContext):
	"""–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
	user_data = await state.get_data()
	title = user_data['title']
	description = ""
	telegram_id = message.from_user.id

	task = await task_service.create_task(telegram_id, title, description)
	
	if task:
		await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {task.id}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(TaskStates.waiting_for_description, F.text)
async def cmd_create_task_description_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
	user_data = await state.get_data()
	title = user_data['title']
	description = message.text
	telegram_id = message.from_user.id

	task = await task_service.create_task(telegram_id, title, description)
	
	if task:
		await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(Command("list_tasks"))
async def cmd_list_tasks(message: Message):
	"""–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
	telegram_id = message.from_user.id
	
	tasks = await task_service.get_user_tasks(telegram_id)
	
	if not tasks:
		await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /create_task")
		return

	response_text = "üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
	for i, task_obj in enumerate(tasks, 1):
		# –ü–æ–ª—É—á–∏–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		tags = await task_service.get_task_tags(telegram_id, task_obj.id)
		tags_str = ', '.join(tags) if tags else '-'
		response_text += (
			f"<b>{i}. {task_obj.title}</b>\n"
			f"   ID: {task_obj.id}\n"
			f"   –ù–∞—á–∞–ª–æ: {task_obj.time_start.strftime('%d.%m.%Y %H:%M') if task_obj.time_start else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
			f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {task_obj.time_end.strftime('%d.%m.%Y %H:%M') if task_obj.time_end else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
			f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task_obj.description or '-'}\n"
			f"   –¢–µ–≥–∏: {tags_str}\n\n"
		)
	
	await message.answer(response_text, parse_mode='HTML')

@router.message(Command("edit_task"))
async def cmd_edit_task_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏."""
	telegram_id = message.from_user.id
	
	tasks = await task_service.get_user_tasks(telegram_id)
	
	if not tasks:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		return

	keyboard_buttons = []
	for task_obj in tasks:
		keyboard_buttons.append([f"{task_obj.id} - {task_obj.title}"])
	
	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
	builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
	builder.adjust(1)

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
		reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
	)
	await state.set_state(TaskStates.waiting_for_title)

@router.message(TaskStates.waiting_for_title, F.text)
async def cmd_edit_task_selected(message: Message, state: FSMContext):
	"""–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		task_id_str = text.split(' - ')[0]
		task_id = int(task_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
		return

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	await state.update_data(task_id=task_id)
	
	builder = InlineKeyboardBuilder()
	builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_task_title_{task_id}")
	builder.button(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_task_desc_{task_id}")
	builder.button(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏", callback_data=f"edit_task_tags_{task_id}")
	builder.adjust(1)
	
	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
		reply_markup=builder.as_markup(),
		reply_to_message_id=message.message_id
	)

@router.callback_query(F.data.startswith("edit_task_title_"))
async def edit_task_title_callback(callback: CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
	task_id = int(callback.data.split('_')[-1])
	await state.update_data(task_id=task_id, edit_field='title')
	await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
	await state.set_state(TaskStates.waiting_for_edit_value)
	await callback.answer()

@router.callback_query(F.data.startswith("edit_task_desc_"))
async def edit_task_description_callback(callback: CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
	task_id = int(callback.data.split('_')[-1])
	await state.update_data(task_id=task_id, edit_field='description')
	await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
	await state.set_state(TaskStates.waiting_for_edit_value)
	await callback.answer()

@router.callback_query(F.data.startswith("edit_task_tags_"))
async def edit_task_tags_callback(callback: CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏ –∑–∞–¥–∞—á–∏."""
	task_id = int(callback.data.split('_')[-1])
	await state.update_data(task_id=task_id)
	
	builder = InlineKeyboardBuilder()
	builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data=f"add_task_tag_{task_id}")
	builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥", callback_data=f"remove_task_tag_{task_id}")
	builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–≥–∏", callback_data=f"show_task_tags_{task_id}")
	builder.adjust(1)
	
	await callback.message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–≥–∞–º–∏:",
		reply_markup=builder.as_markup()
	)
	await callback.answer()

@router.message(TaskStates.waiting_for_edit_value, F.text)
async def cmd_edit_task_value_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
	user_data = await state.get_data()
	task_id = user_data['task_id']
	edit_field = user_data['edit_field']
	new_value = message.text
	telegram_id = message.from_user.id

	success = False
	if edit_field == 'title':
		success = await task_service.update_task(telegram_id, task_id, title=new_value)
	elif edit_field == 'description':
		success = await task_service.update_task(telegram_id, task_id, description=new_value)

	if success:
		await message.answer(f"‚úÖ {edit_field.capitalize()} –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
	
	await state.clear()

@router.message(Command("delete_task"))
async def cmd_delete_task_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: –∑–∞–ø—Ä–æ—Å ID."""
	telegram_id = message.from_user.id

	tasks = await task_service.get_user_tasks(telegram_id)

	if not tasks:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		return

	keyboard_buttons = []
	for task_obj in tasks:
		keyboard_buttons.append([f"{task_obj.id} - {task_obj.title}"])

	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
		builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
		builder.adjust(1)

		await message.answer(
			"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ):",
			reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
		)
		await state.set_state(TaskStates.waiting_for_title)

@router.message(TaskStates.waiting_for_title, F.text)
async def cmd_delete_task_id_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		task_id_str = text.split(' - ')[0]
		task_id = int(task_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
		return

	telegram_id = message.from_user.id
	success = await task_service.delete_task(telegram_id, task_id)
	
	if success:
		await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", reply_markup=None)
	
	await state.clear()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ ---

@router.message(Command("invite"))
async def cmd_invite_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: –≤—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	telegram_id = message.from_user.id
	
	directories = await directory_service.get_user_directories(telegram_id)
	
	if not directories:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")
		return

	keyboard_buttons = []
	for dir_obj in directories:
		keyboard_buttons.append([f"{dir_obj.id} - {dir_obj.name}"])
	
	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
	builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
	builder.adjust(1)

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:",
		reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
	)
	await state.set_state(InvitationStates.waiting_for_directory)

@router.message(InvitationStates.waiting_for_directory, F.text)
async def cmd_invite_directory_selected(message: Message, state: FSMContext):
	"""–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		dir_id_str = text.split(' - ')[0]
		directory_id = int(dir_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
		return

	await state.update_data(directory_id=directory_id)
	await message.answer(
		"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–∏–ª–∏ 0 –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ):",
		reply_markup=None
	)
	await state.set_state(InvitationStates.waiting_for_max_uses)

@router.message(InvitationStates.waiting_for_max_uses, F.text)
async def cmd_invite_max_uses_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π."""
	try:
		max_uses = int(message.text)
		if max_uses < 0:
			raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
	except ValueError:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).")
		return

	await state.update_data(max_uses=max_uses if max_uses > 0 else None)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ):")
	await state.set_state(InvitationStates.waiting_for_expiry_days)

@router.message(InvitationStates.waiting_for_expiry_days, F.text)
async def cmd_invite_expiry_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."""
	try:
		days = int(message.text)
		if days < 0:
			raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
	except ValueError:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).")
		return

	user_data = await state.get_data()
	directory_id = user_data['directory_id']
	max_uses = user_data['max_uses']
	telegram_id = message.from_user.id

	# –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
	from datetime import datetime, timedelta
	valid_until = None
	if days > 0:
		valid_until = datetime.utcnow() + timedelta(days=days)

	# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
	invitation = await invitation_service.create_invitation(
		telegram_id, directory_id, max_uses, valid_until
	)

	if invitation:
		expiry_text = f"–¥–æ {valid_until.strftime('%d.%m.%Y %H:%M')}" if valid_until else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
		uses_text = f"–º–∞–∫—Å–∏–º—É–º {max_uses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π" if max_uses else "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
		
		await message.answer(
			f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
			f"üîë –ö–æ–¥: <code>{invitation.code}</code>\n"
			f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: {expiry_text}\n"
			f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses_text}\n\n"
			f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.",
			parse_mode='HTML'
		)
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
	
	await state.clear()

@router.message(Command("join"))
async def cmd_join_directory(message: Message, command: CommandObject):
	"""–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."""
	if not command.args:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /join ABC12345")
		return

	code = command.args.strip().upper()
	telegram_id = message.from_user.id

	success = await invitation_service.join_directory_by_code(telegram_id, code)
	
	if success:
		await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.")

@router.message(Command("members"))
async def cmd_list_members(message: Message, command: CommandObject):
	"""–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	if not command.args:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.\n–ü—Ä–∏–º–µ—Ä: /members 123")
		return

	try:
		directory_id = int(command.args.strip())
	except ValueError:
		await message.answer("‚ùå ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return

	telegram_id = message.from_user.id
	members = await invitation_service.get_directory_members(telegram_id, directory_id)
	
	if members is None:
		await message.answer("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return

	if not members:
		await message.answer("üì≠ –í —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return

	response_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (ID: {directory_id}):\n\n"
	for i, member in enumerate(members, 1):
		response_text += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {member.telegram_id}\n"
	
	await message.answer(response_text)

@router.message(Command("leave"))
async def cmd_leave_directory(message: Message, command: CommandObject):
	"""–ü–æ–∫–∏–Ω—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
	if not command.args:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.\n–ü—Ä–∏–º–µ—Ä: /leave 123")
		return

	try:
		directory_id = int(command.args.strip())
	except ValueError:
		await message.answer("‚ùå ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return

	telegram_id = message.from_user.id
	success = await invitation_service.leave_directory(telegram_id, directory_id)
	
	if success:
		await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {directory_id}.")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏ ---

@router.message(Command("add_tag"))
async def cmd_add_tag_start(message: Message, command: CommandObject):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–¥–∞—á–µ."""
	if not command.args:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞, ID –∏ —Ç–µ–≥.\n–ü—Ä–∏–º–µ—Ä: /add_tag dir 123 –≤–∞–∂–Ω–æ–µ")
		return

	args = command.args.strip().split()
	if len(args) < 3:
		await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: /add_tag dir 123 –≤–∞–∂–Ω–æ–µ")
		return

	obj_type = args[0].lower()
	try:
		obj_id = int(args[1])
	except ValueError:
		await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return

	tag = ' '.join(args[2:])
	telegram_id = message.from_user.id

	success = False
	if obj_type == 'dir':
		success = await directory_service.add_tag_to_directory(telegram_id, obj_id, tag)
	elif obj_type == 'task':
		success = await task_service.add_tag_to_task(telegram_id, obj_id, tag)
	else:
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'dir' –∏–ª–∏ 'task'.")
		return

	if success:
		await message.answer(f"‚úÖ –¢–µ–≥ '{tag}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ {obj_type} {obj_id}.")
	else:
		await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –∫ {obj_type} {obj_id}.")

@router.message(Command("remove_tag"))
async def cmd_remove_tag_start(message: Message, command: CommandObject):
	"""–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏."""
	if not command.args:
		await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞, ID –∏ —Ç–µ–≥.\n–ü—Ä–∏–º–µ—Ä: /remove_tag dir 123 –≤–∞–∂–Ω–æ–µ")
		return

	args = command.args.strip().split()
	if len(args) < 3:
		await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: /remove_tag dir 123 –≤–∞–∂–Ω–æ–µ")
		return

	obj_type = args[0].lower()
	try:
		obj_id = int(args[1])
	except ValueError:
		await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		return

	tag = ' '.join(args[2:])
	telegram_id = message.from_user.id

	success = False
	if obj_type == 'dir':
		success = await directory_service.remove_tag_from_directory(telegram_id, obj_id, tag)
	elif obj_type == 'task':
		success = await task_service.remove_tag_from_task(telegram_id, obj_id, tag)
	else:
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'dir' –∏–ª–∏ 'task'.")
		return

	if success:
		await message.answer(f"‚úÖ –¢–µ–≥ '{tag}' —É–¥–∞–ª–µ–Ω –∏–∑ {obj_type} {obj_id}.")
	else:
		await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –∏–∑ {obj_type} {obj_id}.")

# --- –ö–æ–º–∞–Ω–¥—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ---

@router.message(Command("help"))
async def on_help(message: Message):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
	help_text = (
		"ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏!\n\n"
		"üìÅ <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:</b>\n"
		"/create_dir - –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
		"/list_dirs - –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π\n"
		"/edit_dir - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
		"/delete_dir - –£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n\n"
		"üìù <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–¥–∞—á:</b>\n"
		"/create_task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
		"/list_tasks - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
		"/edit_task - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n"
		"/delete_task - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n\n"
		"üè∑Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–≥–æ–≤:</b>\n"
		"/add_tag [dir/task] [ID] [—Ç–µ–≥] - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥\n"
		"/remove_tag [dir/task] [ID] [—Ç–µ–≥] - –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥\n\n"
		"üë• <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>\n"
		"/invite - –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
		"/join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É\n"
		"/members [ID] - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
		"/leave [ID] - –ü–æ–∫–∏–Ω—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n\n"
		"‚ÑπÔ∏è <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
		"/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
		"/me - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n"
		"/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	)
	await message.answer(help_text, parse_mode='HTML')

@router.message(Command('me'))
async def on_me(message: Message):
	try:
		user = await user_service.get_or_create_user(message.from_user)
		if user is None:
			await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
			return

		dirs = await directory_service.get_user_directories(message.from_user.id)
		tasks = await task_service.get_user_tasks(message.from_user.id)
		
		text = (
			f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
			f"–ò–º—è: {message.from_user.full_name}\n"
			f"Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
			f"ID –≤ —Å–∏—Å—Ç–µ–º–µ: {user.id}\n"
			f"Telegram ID: {message.from_user.id}\n"
			f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M:%S') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
			f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
			f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(dirs)}\n"
			f"–ó–∞–¥–∞—á: {len(tasks)}"
		)
		await message.answer(text, parse_mode='HTML')
	except Exception as e:
		logger.exception("Error while retrieving user information for Telegram ID %s: %s", message.from_user.id, e)
		await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /me.")
