from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from sqlalchemy import select
from dtimebot.database import LocalSession

from dtimebot.logs import main_logger
from dtimebot.models.users import User
from dtimebot.services import user_service, directory_service, task_service


logger = main_logger.getChild('bot.handlers')

router = Router() # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM ---
class DirectoryStates(StatesGroup):
	waiting_for_name = State()
	waiting_for_description = State()
	waiting_for_tag = State() # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤

class TaskStates(StatesGroup):
	waiting_for_title = State()
	waiting_for_description = State()
	waiting_for_tag = State() # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏ ---

@router.message(Command("create_dir"))
async def cmd_create_dir_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è."""
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
	await state.set_state(DirectoryStates.waiting_for_name)

@router.message(DirectoryStates.waiting_for_name, F.text)
async def cmd_create_dir_name_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è."""
	await state.update_data(name=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
	await state.set_state(DirectoryStates.waiting_for_description)

@router.message(DirectoryStates.waiting_for_description, Command("skip"))
async def cmd_create_dir_skip_description(message: Message, state: FSMContext):
	"""–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	user_data = await state.get_data()
	name = user_data['name']
	description = ""
	telegram_id = message.from_user.id

	from dtimebot.services import directory_service
	directory = await directory_service.create_directory(telegram_id, name, description)
	
	if directory:
		await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '<b>{name}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {directory.id}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(DirectoryStates.waiting_for_description, F.text)
async def cmd_create_dir_description_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
	user_data = await state.get_data()
	name = user_data['name']
	description = message.text
	telegram_id = message.from_user.id

	from dtimebot.services import directory_service
	directory = await directory_service.create_directory(telegram_id, name, description)
	
	if directory:
		await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '<b>{name}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {directory.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(Command("directories"))
@router.message(Command("list_dirs"))
async def cmd_list_dirs(message: Message):
	"""–°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
	telegram_id = message.from_user.id
	
	from dtimebot.services import directory_service
	directories = await directory_service.get_user_directories(telegram_id)
	
	if not directories:
		await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /create_dir")
		return

	response_text = "üìÅ –í–∞—à–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n\n"
	for i, dir_obj in enumerate(directories, 1):
		# –ü–æ–ª—É—á–∏–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		tags = await directory_service.get_directory_tags(telegram_id, dir_obj.id)
		tags_str = ', '.join(tags) if tags else '-'
		response_text += (
			f"<b>{i}. {dir_obj.name}</b>\n"
			f"   ID: {dir_obj.id}\n"
			f"   –°–æ–∑–¥–∞–Ω–∞: {dir_obj.created_at.strftime('%d.%m.%Y %H:%M') if dir_obj.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
			f"   –û–ø–∏—Å–∞–Ω–∏–µ: {dir_obj.description or '-'}\n"
			f"   –¢–µ–≥–∏: {tags_str}\n\n"
		)
	
	await message.answer(response_text, parse_mode='HTML')

@router.message(Command("delete_dir"))
async def cmd_delete_dir_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: –∑–∞–ø—Ä–æ—Å ID."""
	telegram_id = message.from_user.id
	
	from dtimebot.services import directory_service
	directories = await directory_service.get_user_directories(telegram_id)
	
	if not directories:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		return

	keyboard_buttons = []
	for dir_obj in directories:
		keyboard_buttons.append([f"{dir_obj.id} - {dir_obj.name}"])
	
	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
	builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
	builder.adjust(1)

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ):",
		reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
	)
	await state.set_state(DirectoryStates.waiting_for_name)

@router.message(DirectoryStates.waiting_for_name, F.text)
async def cmd_delete_dir_id_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		# –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ "ID - –ù–∞–∑–≤–∞–Ω–∏–µ"
		dir_id_str = text.split(' - ')[0]
		directory_id = int(dir_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID.")
		return

	telegram_id = message.from_user.id
	
	from dtimebot.services import directory_service
	success = await directory_service.delete_directory(telegram_id, directory_id)
	
	if success:
		await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å ID {directory_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", reply_markup=None)
	
	await state.clear()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ ---

@router.message(Command("create_task"))
async def cmd_create_task_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è."""
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
	await state.set_state(TaskStates.waiting_for_title)

@router.message(TaskStates.waiting_for_title, F.text)
async def cmd_create_task_title_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è."""
	await state.update_data(title=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
	await state.set_state(TaskStates.waiting_for_description)

@router.message(TaskStates.waiting_for_description, Command("skip"))
async def cmd_create_task_skip_description(message: Message, state: FSMContext):
	"""–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
	user_data = await state.get_data()
	title = user_data['title']
	description = ""
	telegram_id = message.from_user.id

	from dtimebot.services import task_service
	task = await task_service.create_task(telegram_id, title, description)
	
	if task:
		await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {task.id}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(TaskStates.waiting_for_description, F.text)
async def cmd_create_task_description_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
	user_data = await state.get_data()
	title = user_data['title']
	description = message.text
	telegram_id = message.from_user.id

	from dtimebot.services import task_service
	task = await task_service.create_task(telegram_id, title, description)
	
	if task:
		await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: {task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", parse_mode='HTML')
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	
	await state.clear()

@router.message(Command("list_tasks"))
async def cmd_list_tasks(message: Message):
	"""–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
	telegram_id = message.from_user.id
	
	from dtimebot.services import task_service
	tasks = await task_service.get_user_tasks(telegram_id)
	
	if not tasks:
		await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /create_task")
		return

	response_text = "üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
	for i, task_obj in enumerate(tasks, 1):
		# –ü–æ–ª—É—á–∏–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		tags = await task_service.get_task_tags(telegram_id, task_obj.id)
		tags_str = ', '.join(tags) if tags else '-'
		response_text += (
			f"<b>{i}. {task_obj.title}</b>\n"
			f"   ID: {task_obj.id}\n"
			f"   –ù–∞—á–∞–ª–æ: {task_obj.time_start.strftime('%d.%m.%Y %H:%M') if task_obj.time_start else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
			f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {task_obj.time_end.strftime('%d.%m.%Y %H:%M') if task_obj.time_end else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
			f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task_obj.description or '-'}\n"
			f"   –¢–µ–≥–∏: {tags_str}\n\n"
		)
	
	await message.answer(response_text, parse_mode='HTML')

@router.message(Command("delete_task"))
async def cmd_delete_task_start(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: –∑–∞–ø—Ä–æ—Å ID."""
	telegram_id = message.from_user.id
	
	from dtimebot.services import task_service
	tasks = await task_service.get_user_tasks(telegram_id)
	
	if not tasks:
		await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		return

	keyboard_buttons = []
	for task_obj in tasks:
		keyboard_buttons.append([f"{task_obj.id} - {task_obj.title}"])
	
	builder = ReplyKeyboardBuilder()
	for row in keyboard_buttons:
		builder.button(text=row[0])
	builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
	builder.adjust(1) # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ):",
		reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
	)
	await state.set_state(TaskStates.waiting_for_title) # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ID

@router.message(TaskStates.waiting_for_title, F.text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –∏ –¥–ª—è –∏–º–µ–Ω–∏
async def cmd_delete_task_id_received(message: Message, state: FSMContext):
	"""–ü–æ–ª—É—á–µ–Ω ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
	text = message.text.strip()
	
	if text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
		await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
		await state.clear()
		return

	try:
		# –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ "ID - –ù–∞–∑–≤–∞–Ω–∏–µ"
		task_id_str = text.split(' - ')[0]
		task_id = int(task_id_str)
	except (ValueError, IndexError):
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID.")
		return

	telegram_id = message.from_user.id
	
	from dtimebot.services import task_service
	success = await task_service.delete_task(telegram_id, task_id)
	
	if success:
		await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
	else:
		await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", reply_markup=None)
	
	await state.clear()


# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∑–∞–¥–∞—á)

# --- –ö–æ–º–∞–Ω–¥—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ---
@router.message(Command("help"))
async def on_help(message: Message):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
	help_text = (
		"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏!\n"
		"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
		"/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è/–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
		"/me - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å\n"
		"/create_dir - –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
		"/list_dirs - –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π\n"
		"/delete_dir - –£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
		"/create_task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
		"/list_tasks - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
		"/delete_task - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
	)
	await message.answer(help_text)

@router.message(Command('me'))
async def on_me(message: Message):
    try:
        # –í user_service —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ get_or_create_user
        user = await user_service.get_or_create_user(message.from_user)
        if user is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dirs = await directory_service.get_user_directories(message.from_user.id)
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\nID –≤ —Å–∏—Å—Ç–µ–º–µ: {user.id}\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(dirs)}"
        await message.answer(text)
    except Exception as e:
        logger.exception("Error while retrieving user information for Telegram ID %s: %s", message.from_user.id, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /me.")
